# Aqui vamos fazer toda parte dos códigos de interações, select, loops, buscar o arquivo externo, e fazer a alteração na tabela desejada.

*&---------------------------------------------------------------------*
*& Include          ZR_FSW_BATCH_RMORAES_F01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  z_busca_arquivo
*&---------------------------------------------------------------------*
  "  Pega o valor contido no parameters e add o texto '.txt' no final assim o
  " o nome do arquivo fica com a extensão desejada.
FORM z_busca_arquivo.
  CONCATENATE p_dest '.txt' INTO p_dest.
  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      def_filename = 'D:\its 10.01.2022\maratxt.txt'
      def_path     = 'D:\'
      mask         = ',Texto,*.txt,Todos,*.*.'
      mode         = 'O'
      title        = 'Arquivo de Entrada'(004)
    IMPORTING
      filename     = p_dest
                     EXCEPTIONS
                     OTHERS.

ENDFORM.                    " z_busca_local

*&---------------------------------------------------------------------*
*&      Form  z_mostra_local
*&---------------------------------------------------------------------*
" Mostra o local onde será gravado o arquivo de Log.
FORM z_mostra_local .
  CALL METHOD cl_gui_frontend_services=>directory_browse
    EXPORTING
      window_title         = ' '
      initial_folder       = 'D:\'
    CHANGING
      selected_folder      = p_log
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      not_supported_by_gui = 3
      OTHERS               = 4.
  " Nome do Arquivo do Log contendo o endereço+NOME1+HORA+.TXT.
  CONCATENATE  p_log '\' sy-uname '_' sy-uzeit '.TXT' INTO p_log
          .

ENDFORM.                    " Z_MOSTRA_LOCAL

*&---------------------------------------------------------------------*
*&      Form  Z_MONTA_ARQUIVO
*&---------------------------------------------------------------------*
"  Pega o arquivo externo relacionado e coloca os dados na 'T_LINE
FORM z_baixa_arquivo.
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      filename = p_dest
    TABLES
      data_tab = t_line
    EXCEPTIONS
      OTHERS   = 17.

ENDFORM.                    " Z_MONTA_ARQUIVO


*&---------------------------------------------------------------------*
*& Form z_trata_arquivo
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM z_trata_arquivo .
  LOOP AT t_line.
    " o Split quebra a linha e separa por delimitador ';' colocando cada dado
    " em cada campo sequencialmente.
    SPLIT t_line AT ';' INTO: st_arqui-matnr
                              st_arqui-maktx.

    " Add registro na tabela.
    APPEND st_arqui TO it_arqui.

  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form z_monta_shdb
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM z_monta_shdb .
  LOOP AT it_arqui INTO st_arqui.
    " cria uma variavel pra informar qual cliente está porcessando no
    " perform z_sapgui_progress_indicator.
    CONCATENATE 'Processando o Cliente -' st_arqui-matnr
    INTO vg_texto SEPARATED BY space.
    "  informa o processo atual
    PERFORM z_sapgui_progress_indicator USING vg_texto.
    " É aki que o bixo pega, lembra dakele arquivo SHDB que enviaram pra vc
    " é aki que ele começa a faze sentido, oq nós estamos fazendo aki e criando
    " uma tabela com as informações conforme o SHDB só mundando a informação
    " que vc quer que mude conforme o registro.
    "  Depois de terminar os performs z_preenche_bdc vc vai dar uma olhada
    " na tabela it_bdcdata pq ela vai estar igualzinha com o SHDB que
    " enviaram pra vc.
    " Crie um 'Perform pra cada tela que tiver no SHDB.
    PERFORM z_preenche_bdc USING:

      'X'    'SAPLMGMM'       '0060',
      ' '    'BDC_CURSOR'     'RMMG1-MATNR',
      ' '    'BDC_OKCODE'     '=AUSW',
      ' '    'RMMG1-MATNR'    st_arqui-matnr.


    PERFORM z_preenche_bdc USING:

      'X'    'SAPLMGMM'        '0070',
      ' '    'BDC_CURSOR'      'MSICHTAUSW-DYTXT(01)',
      ' '    'BDC_OKCODE'      '=ENTR',
      ' '    'MSICHTAUSW-KZSEL(01)'   'X'.

    PERFORM z_preenche_bdc USING:

      'X'    'SAPLMGMM'        '4004',
      ' '    'BDC_OKCODE'      '=BU',
      ' '    'BDC_CURSOR'      'MAKT-MAKTX',
      ' '    'MAKT-MAKTX'       st_arqui-maktx.

    PERFORM z_carrega_transacao.
    PERFORM zf_imprimi_mensagem.

    CLEAR it_bdcdata.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form z_manda_arquivo
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM z_manda_arquivo .
  "  Cria um arquivo externo conforme 'Filename com as informações da 'Data_tab
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename = p_log
    TABLES
      data_tab = it_msg
    EXCEPTIONS
      OTHERS   = 17.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form z_preenche_bdc
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&      --> P_
*&      --> P_
*&---------------------------------------------------------------------*
FORM z_preenche_bdc  USING   dynbegin
                           name
                           value.
  IF dynbegin = 'X'.
    MOVE: name      TO st_bdcdata-program,
          value     TO st_bdcdata-dynpro,
          dynbegin  TO st_bdcdata-dynbegin.
    APPEND st_bdcdata TO it_bdcdata.
  ELSE.

    MOVE: name  TO st_bdcdata-fnam,
          value TO st_bdcdata-fval.
    APPEND st_bdcdata TO it_bdcdata.

  ENDIF.
  "  prepara a estrutura para o Loop.
  CLEAR st_bdcdata.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form z_carrega_transacao
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM z_carrega_transacao .

"  Chama a trasação informada usando a tabela 'IT_BDCDATA que na verdade
" é um shdb que vai automátiza o processo até o ultimo registro, existe
" dois metodos de ver o processo, no 'MODE se colocar 'N' vc não visualiza
" o processo, agora se vc coloca 'A' no 'MODE vc terá que apertar 'Enter
" por processo e depois de efetuar o processo por registro ele popula a
" tabela 'IT_MSG com os dados de retorno,se foi realizado com exito, ou se
" deu algum problema.
  CALL TRANSACTION 'MM02' USING it_bdcdata
                          MODE  vg_mode
                          UPDATE vg_s
                          MESSAGES INTO it_msg.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form zf_imprimi_mensagem
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM zf_imprimi_mensagem .

"  Dá 'Loop na tabela de retorno da chamada da transação e alimenta outra
" tabela com a retorno referenciado com o Cliente
  LOOP AT it_msg.
    msgno = it_msg-msgnr.
    "  Function que faz mostrar a mensagem
    CALL FUNCTION 'WRITE_MESSAGE'
      EXPORTING
        msgid         = it_msg-msgid
        msgno         = msgno
        msgty         = it_msg-msgtyp
        msgv1         = it_msg-msgv1
        msgv2         = it_msg-msgv2
        msgv3         = it_msg-msgv3
        msgv4         = it_msg-msgv4
        msgv5         = ' '
     IMPORTING
*       ERROR         =
        messg         = mensg
*       MSGLN         =
              .
  ENDLOOP.

*  st_message-cliente = st_arqui-matnr.
*  st_message-msgty   = mensg-msgty.
*  st_message-msgno   = mensg-msgno.
*  st_message-msgtx   = mensg-msgtx.
" popula a tabela principal de mensagem que será o Log de erro.
*  APPEND st_message TO it_message.

*   WRITE: / , st_arqui-cliente ,
*              mensg-msgtx,
*              mensg-msgty
*           .
ENDFORM.
*&---------------------------------------------------------------------*
*& Form z_sapgui_progress_indicator
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> VG_TEXTO
*&---------------------------------------------------------------------*
FORM z_sapgui_progress_indicator  USING    p_vg_texto.

ENDFORM.

*&---------------------------------------------------------------------*
*& Include          ZR_FSW_BATCH_RMORAES_F02
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form zf_monta_bapi
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM zf_monta_bapi .


************************************************************
*-------------Chamada das Funções BAPI ---------------------
************************************************************
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_mater
    IMPORTING
      output = gs_head-material.
  IF sy-subrc <> '0'.

  ENDIF.

    gs_material-langu      = sy-langu.
    gs_material-langu_iso  = sy-langu.
    gs_material-matl_desc  = p_desc.


    APPEND gs_material TO gt_material.
    CLEAR gs_material.

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        headdata            = gs_head
      IMPORTING
        return              = gs_return
      TABLES
        materialdescription = gt_material.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*   EXPORTING
*     WAIT          =
*   IMPORTING
*     RETURN        =
      .

ENDFORM.
